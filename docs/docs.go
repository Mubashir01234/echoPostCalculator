// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
		/calculator/add: {
			post :{
				summary: Adding two numbers.,
				description: They get two number from user and then add each other.,
				produces: [
					application/json
				],
				parameters: [
					{
						in: body,
						name: Numbers,
						description: Give any number,
						properties: {
							number1: {
								type: integer,
								required: true,
								format: json
							},
							number2: {
								type: integer,
								format: json
							}
						}
					}
				],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},
		/calculator/sub: {
			post :{
				summary: Subtracting two numbers.,
				description: They get two number from user and then subtract.,
				produces: [
					application/json
				],
				parameters: [
					{
						in: body,
						name: Numbers,
						description: Give any number,
						properties: {
							number1: {
								type: integer,
								required: true,
								format: json
							},
							number2: {
								type: integer,
								format: json
							}
						}
					}
				],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},
		/calculator/mul: {
			post :{
				summary: Multipling two numbers.,
				description: They get two number from user and then multiple.,
				produces: [
					application/json
				],
				parameters: [
					{
						in: body,
						name: Numbers,
						description: Give any number,
						properties: {
							number1: {
								type: integer,
								required: true,
								format: json
							},
							number2: {
								type: integer,
								format: json
							}
						}
					}
				],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},
		/calculator/div: {
			post :{
				summary: Dividing two numbers.,
				description: They get two number from user and then divide them.,
				produces: [
					application/json
				],
				parameters: [
					{
						in: body,
						name: Numbers,
						description: Give any number,
						properties: {
							number1: {
								type: integer,
								required: true,
								format: json
							},
							number2: {
								type: integer,
								format: json
							}
						}
					}
				],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},
		/calculator/mod: {
			post :{
				summary: Modules of two numbers.,
				description: They get two number from user and then takr modules.,
				produces: [
					application/json
				],
				parameters: [
					{
						in: body,
						name: Numbers,
						description: Give any number,
						properties: {
							number1: {
								type: integer,
								required: true,
								format: json
							},
							number2: {
								type: integer,
								format: json
							}
						}
					}
				],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},
		/calculator/power: {
			post :{
				summary: Power of numbers.,
				description: Calculate the value of the number1 raised to the power number2,
				produces: [
					application/json
				],
				parameters: [
					{
						in: body,
						name: Numbers,
						description: Give any number,
						properties: {
							number1: {
								type: integer,
								required: true,
								format: json
							},
							number2: {
								type: integer,
								format: json
							}
						}
					}
				],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},
		/calculator/square: {
			post :{
				summary: Square of two numbers.,
				description: They get two number from user and then the square of both number.,
				produces: [
					application/json
				],
				parameters: [
					{
						in: body,
						name: Numbers,
						description: Give any number,
						properties: {
							number1: {
								type: integer,
								required: true,
								format: json
							},
						}
					}
				],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},
		/calculator/squareroot: {
			post :{
				summary: Square of two numbers.,
				description: They get two number from user and then square of these numbers.,
				produces: [
					application/json
				],
				parameters: [
					{
						in: body,
						name: Numbers,
						description: Give any number,
						properties: {
							number1: {
								type: integer,
								required: true,
								format: json
							},
						}
					}
				],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		}
	}
	
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "2.0",
	Host:        "localhost:3000",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Calculator",
	Description: "Calculator which perform some action.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
